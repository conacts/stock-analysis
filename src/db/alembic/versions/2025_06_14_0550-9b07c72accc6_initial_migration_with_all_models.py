"""Initial migration with all models

Revision ID: 9b07c72accc6
Revises:
Create Date: 2025-06-14 05:50:52.101527

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "9b07c72accc6"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "agent_prompts",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("agent_name", sa.String(length=100), nullable=False),
        sa.Column("prompt_version", sa.String(length=50), nullable=False),
        sa.Column("system_prompt", sa.Text(), nullable=False),
        sa.Column("is_active", sa.String(length=10), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.String(length=100), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("agent_name", "prompt_version", name="uq_agent_prompts_name_version"),
    )
    op.create_index(op.f("ix_agent_prompts_agent_name"), "agent_prompts", ["agent_name"], unique=False)
    op.create_table(
        "portfolio_configs",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("portfolio_id", sa.String(length=100), nullable=False),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("symbols", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("risk_tolerance", sa.String(length=50), nullable=False),
        sa.Column("max_position_size_pct", sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column("max_sector_exposure_pct", sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column("cash_reserve_pct", sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column("trading_enabled", sa.String(length=10), nullable=True),
        sa.Column("rebalance_frequency", sa.String(length=50), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("is_active", sa.String(length=10), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_portfolio_configs_portfolio_id"), "portfolio_configs", ["portfolio_id"], unique=True)
    op.create_table(
        "swarm_conversations",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("portfolio_id", sa.String(length=100), nullable=False),
        sa.Column("conversation_id", sa.String(length=100), nullable=False),
        sa.Column("user_message", sa.Text(), nullable=False),
        sa.Column("agent_responses", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("final_agent", sa.String(length=100), nullable=False),
        sa.Column("turns_used", sa.Integer(), nullable=False),
        sa.Column("success", sa.String(length=10), nullable=False),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("conversation_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_swarm_conversations_conversation_id"), "swarm_conversations", ["conversation_id"], unique=True)
    op.create_index(op.f("ix_swarm_conversations_portfolio_id"), "swarm_conversations", ["portfolio_id"], unique=False)
    op.create_table(
        "swarm_market_context",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("portfolio_id", sa.String(length=100), nullable=False),
        sa.Column("context_type", sa.String(length=100), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=True),
        sa.Column("data", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("relevance_score", sa.Numeric(precision=3, scale=2), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_swarm_market_context_context_type"), "swarm_market_context", ["context_type"], unique=False)
    op.create_index(op.f("ix_swarm_market_context_portfolio_id"), "swarm_market_context", ["portfolio_id"], unique=False)
    op.create_index(op.f("ix_swarm_market_context_symbol"), "swarm_market_context", ["symbol"], unique=False)
    op.create_table(
        "trading_decisions",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("conversation_id", sa.String(length=100), nullable=False),
        sa.Column("portfolio_id", sa.String(length=100), nullable=False),
        sa.Column("decision_type", sa.String(length=50), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=True),
        sa.Column("quantity", sa.Numeric(precision=15, scale=6), nullable=True),
        sa.Column("price", sa.Numeric(precision=15, scale=6), nullable=True),
        sa.Column("reasoning", sa.Text(), nullable=False),
        sa.Column("confidence_score", sa.Numeric(precision=3, scale=2), nullable=True),
        sa.Column("risk_assessment", sa.Text(), nullable=True),
        sa.Column("executed", sa.String(length=10), nullable=True),
        sa.Column("execution_result", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("executed_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_trading_decisions_conversation_id"), "trading_decisions", ["conversation_id"], unique=False)
    op.create_index(op.f("ix_trading_decisions_portfolio_id"), "trading_decisions", ["portfolio_id"], unique=False)
    op.create_index(op.f("ix_trading_decisions_symbol"), "trading_decisions", ["symbol"], unique=False)
    op.drop_table("portfolio_snapshots")
    op.drop_table("portfolio_transactions")
    op.drop_table("portfolio_positions")
    op.drop_table("portfolios")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "portfolios",
        sa.Column("id", sa.INTEGER(), server_default=sa.text("nextval('portfolios_id_seq'::regclass)"), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("portfolio_type", sa.VARCHAR(length=50), server_default=sa.text("'personal'::character varying"), autoincrement=False, nullable=True),
        sa.Column("base_currency", sa.VARCHAR(length=10), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), autoincrement=False, nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), autoincrement=False, nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), server_default=sa.text("true"), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="portfolios_pkey"),
        sa.UniqueConstraint("name", name="portfolios_name_key", postgresql_include=[], postgresql_nulls_not_distinct=False),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "portfolio_positions",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("portfolio_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("symbol", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column("quantity", sa.NUMERIC(precision=15, scale=6), server_default=sa.text("0.0"), autoincrement=False, nullable=False),
        sa.Column("average_cost", sa.NUMERIC(precision=15, scale=6), server_default=sa.text("0.0"), autoincrement=False, nullable=False),
        sa.Column("current_price", sa.NUMERIC(precision=15, scale=6), server_default=sa.text("0.0"), autoincrement=False, nullable=True),
        sa.Column("market_value", sa.NUMERIC(precision=15, scale=6), server_default=sa.text("0.0"), autoincrement=False, nullable=True),
        sa.Column("unrealized_pnl", sa.NUMERIC(precision=15, scale=6), server_default=sa.text("0.0"), autoincrement=False, nullable=True),
        sa.Column("unrealized_pnl_pct", sa.NUMERIC(precision=8, scale=4), server_default=sa.text("0.0"), autoincrement=False, nullable=True),
        sa.Column("sector", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column("last_updated", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["portfolio_id"], ["portfolios.id"], name=op.f("portfolio_positions_portfolio_id_fkey")),
        sa.PrimaryKeyConstraint("id", name=op.f("portfolio_positions_pkey")),
        sa.UniqueConstraint("portfolio_id", "symbol", name=op.f("portfolio_positions_portfolio_id_symbol_key"), postgresql_include=[], postgresql_nulls_not_distinct=False),
    )
    op.create_table(
        "portfolio_transactions",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("portfolio_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("symbol", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column("transaction_type", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column("quantity", sa.NUMERIC(precision=15, scale=6), autoincrement=False, nullable=False),
        sa.Column("price", sa.NUMERIC(precision=15, scale=6), autoincrement=False, nullable=False),
        sa.Column("total_amount", sa.NUMERIC(precision=15, scale=6), autoincrement=False, nullable=False),
        sa.Column("fees", sa.NUMERIC(precision=15, scale=6), server_default=sa.text("0.0"), autoincrement=False, nullable=True),
        sa.Column("transaction_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("notes", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["portfolio_id"], ["portfolios.id"], name=op.f("portfolio_transactions_portfolio_id_fkey")),
        sa.PrimaryKeyConstraint("id", name=op.f("portfolio_transactions_pkey")),
    )
    op.create_table(
        "portfolio_snapshots",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("portfolio_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("snapshot_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("total_value", sa.NUMERIC(precision=15, scale=6), server_default=sa.text("0.0"), autoincrement=False, nullable=True),
        sa.Column("cash_balance", sa.NUMERIC(precision=15, scale=6), server_default=sa.text("0.0"), autoincrement=False, nullable=True),
        sa.Column("invested_amount", sa.NUMERIC(precision=15, scale=6), server_default=sa.text("0.0"), autoincrement=False, nullable=True),
        sa.Column("unrealized_pnl", sa.NUMERIC(precision=15, scale=6), server_default=sa.text("0.0"), autoincrement=False, nullable=True),
        sa.Column("unrealized_pnl_pct", sa.NUMERIC(precision=8, scale=4), server_default=sa.text("0.0"), autoincrement=False, nullable=True),
        sa.Column("day_change", sa.NUMERIC(precision=15, scale=6), server_default=sa.text("0.0"), autoincrement=False, nullable=True),
        sa.Column("day_change_pct", sa.NUMERIC(precision=8, scale=4), server_default=sa.text("0.0"), autoincrement=False, nullable=True),
        sa.Column("positions_count", sa.INTEGER(), server_default=sa.text("0"), autoincrement=False, nullable=True),
        sa.Column("top_holdings", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
        sa.Column("sector_allocation", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["portfolio_id"], ["portfolios.id"], name=op.f("portfolio_snapshots_portfolio_id_fkey")),
        sa.PrimaryKeyConstraint("id", name=op.f("portfolio_snapshots_pkey")),
        sa.UniqueConstraint("portfolio_id", "snapshot_date", name=op.f("portfolio_snapshots_portfolio_id_snapshot_date_key"), postgresql_include=[], postgresql_nulls_not_distinct=False),
    )
    op.drop_index(op.f("ix_trading_decisions_symbol"), table_name="trading_decisions")
    op.drop_index(op.f("ix_trading_decisions_portfolio_id"), table_name="trading_decisions")
    op.drop_index(op.f("ix_trading_decisions_conversation_id"), table_name="trading_decisions")
    op.drop_table("trading_decisions")
    op.drop_index(op.f("ix_swarm_market_context_symbol"), table_name="swarm_market_context")
    op.drop_index(op.f("ix_swarm_market_context_portfolio_id"), table_name="swarm_market_context")
    op.drop_index(op.f("ix_swarm_market_context_context_type"), table_name="swarm_market_context")
    op.drop_table("swarm_market_context")
    op.drop_index(op.f("ix_swarm_conversations_portfolio_id"), table_name="swarm_conversations")
    op.drop_index(op.f("ix_swarm_conversations_conversation_id"), table_name="swarm_conversations")
    op.drop_table("swarm_conversations")
    op.drop_index(op.f("ix_portfolio_configs_portfolio_id"), table_name="portfolio_configs")
    op.drop_table("portfolio_configs")
    op.drop_index(op.f("ix_agent_prompts_agent_name"), table_name="agent_prompts")
    op.drop_table("agent_prompts")
    # ### end Alembic commands ###
