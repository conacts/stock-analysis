// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DailyAnalysis {
  id             Int      @id @default(autoincrement())
  date           DateTime @db.Date
  symbol         String   @db.VarChar(10)
  analysisData   Json     @map("analysis_data") @db.JsonB
  compositeScore Decimal? @map("composite_score") @db.Decimal(5, 2)
  rating         String?  @db.VarChar(20)
  confidence     String?  @db.VarChar(20)
  createdAt      DateTime @default(now()) @map("created_at")

  @@unique([date, symbol], name: "uq_daily_analysis_date_symbol")
  @@index([date])
  @@index([symbol])
  @@map("daily_analysis")
}

model DailyDecision {
  id             Int      @id @default(autoincrement())
  date           DateTime @unique @db.Date
  decisionType   String   @map("decision_type") @db.VarChar(50)
  reasoning      String   @db.Text
  selectedStocks Json?    @map("selected_stocks") @db.JsonB
  marketContext  Json?    @map("market_context") @db.JsonB
  createdAt      DateTime @default(now()) @map("created_at")

  @@index([date])
  @@map("daily_decisions")
}

model PerformanceTracking {
  id                 Int      @id @default(autoincrement())
  symbol             String   @db.VarChar(10)
  recommendationDate DateTime @map("recommendation_date") @db.Date
  entryPrice         Decimal? @map("entry_price") @db.Decimal(10, 2)
  currentPrice       Decimal? @map("current_price") @db.Decimal(10, 2)
  targetPrice        Decimal? @map("target_price") @db.Decimal(10, 2)
  rating             String?  @db.VarChar(20)
  daysHeld           Int?     @map("days_held")
  returnPct          Decimal? @map("return_pct") @db.Decimal(8, 4)
  status             String?  @db.VarChar(20) // active, closed
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([symbol])
  @@map("performance_tracking")
}

model MarketContext {
  id                  Int      @id @default(autoincrement())
  date                DateTime @unique @db.Date
  marketSentiment     String?  @map("market_sentiment") @db.VarChar(50)
  vixLevel            Decimal? @map("vix_level") @db.Decimal(6, 2)
  sectorRotation      Json?    @map("sector_rotation") @db.JsonB
  economicIndicators  Json?    @map("economic_indicators") @db.JsonB
  newsThemes          Json?    @map("news_themes") @db.JsonB
  createdAt           DateTime @default(now()) @map("created_at")

  @@index([date])
  @@map("market_context")
}

model MigrationHistory {
  id          Int      @id @default(autoincrement())
  version     String   @unique @db.VarChar(50)
  description String?  @db.VarChar(200)
  appliedAt   DateTime @default(now()) @map("applied_at")

  @@map("migration_history")
}

// Portfolio Management Models
model Portfolio {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(100)
  description  String?  @db.Text
  portfolioType String  @default("personal") @map("portfolio_type") @db.VarChar(50)
  baseCurrency String   @default("USD") @map("base_currency") @db.VarChar(3)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  isActive     Boolean  @default(true) @map("is_active")

  positions    PortfolioPosition[]
  transactions PortfolioTransaction[]
  snapshots    PortfolioSnapshot[]
  llm_messages PortfolioLlmMessage[]
  analysis_history PortfolioAnalysisHistory[]
  price_alerts StockPriceAlert[]

  @@map("portfolios")
}

model PortfolioPosition {
  id                Int       @id @default(autoincrement())
  portfolioId       Int       @map("portfolio_id")
  symbol            String    @db.VarChar(10)
  quantity          Decimal   @db.Decimal(15, 6)
  averageCost       Decimal   @map("average_cost") @db.Decimal(10, 2)
  currentPrice      Decimal   @map("current_price") @db.Decimal(10, 2)
  marketValue       Decimal   @map("market_value") @db.Decimal(15, 2)
  unrealizedPnl     Decimal   @map("unrealized_pnl") @db.Decimal(15, 2)
  unrealizedPnlPct  Decimal   @map("unrealized_pnl_pct") @db.Decimal(8, 4)
  sector            String?   @db.VarChar(50)
  lastUpdated       DateTime? @map("last_updated")

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, symbol])
  @@index([portfolioId])
  @@index([symbol])
  @@map("portfolio_positions")
}

model PortfolioTransaction {
  id              Int      @id @default(autoincrement())
  portfolioId     Int      @map("portfolio_id")
  symbol          String   @db.VarChar(10)
  transactionType String   @map("transaction_type") @db.VarChar(20) // buy, sell, dividend, split
  quantity        Decimal  @db.Decimal(15, 6)
  price           Decimal  @db.Decimal(10, 2)
  totalAmount     Decimal  @map("total_amount") @db.Decimal(15, 2)
  fees            Decimal  @default(0) @db.Decimal(10, 2)
  transactionDate DateTime @map("transaction_date") @db.Date
  notes           String?  @db.Text
  createdAt       DateTime @default(now()) @map("created_at")

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
  @@index([symbol])
  @@index([transactionDate])
  @@map("portfolio_transactions")
}

model PortfolioSnapshot {
  id                 Int      @id @default(autoincrement())
  portfolioId        Int      @map("portfolio_id")
  snapshotDate       DateTime @map("snapshot_date") @db.Date
  totalValue         Decimal  @map("total_value") @db.Decimal(15, 2)
  cashBalance        Decimal  @map("cash_balance") @db.Decimal(15, 2)
  investedAmount     Decimal  @map("invested_amount") @db.Decimal(15, 2)
  unrealizedPnl      Decimal  @map("unrealized_pnl") @db.Decimal(15, 2)
  unrealizedPnlPct   Decimal  @map("unrealized_pnl_pct") @db.Decimal(8, 4)
  dayChange          Decimal  @map("day_change") @db.Decimal(15, 2)
  dayChangePct       Decimal  @map("day_change_pct") @db.Decimal(8, 4)
  positionsCount     Int      @map("positions_count")
  topHoldings        String?  @map("top_holdings") @db.Text // JSON string
  sectorAllocation   String?  @map("sector_allocation") @db.Text // JSON string
  createdAt          DateTime @default(now()) @map("created_at")

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, snapshotDate])
  @@index([portfolioId])
  @@index([snapshotDate])
  @@map("portfolio_snapshots")
}

// NEW: Portfolio LLM Message History
model PortfolioLlmMessage {
  id           Int      @id @default(autoincrement())
  portfolio_id Int
  role         String   // "user", "assistant", "system"
  content      String   @db.Text
  tokens_used  Int?
  cost_usd     Decimal? @db.Decimal(10, 6)
  model        String?  // "deepseek-chat", etc.
  created_at   DateTime @default(now())

  // Context metadata
  analysis_type String?  // "daily", "weekly", "alert", "rebalance"
  stock_symbols String[] // Array of stocks discussed

  // Relations
  portfolio Portfolio @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)

  @@map("portfolio_llm_messages")
  @@index([portfolio_id, created_at])
  @@index([analysis_type, created_at])
}

// NEW: Stock Price Alerts Configuration
model StockPriceAlert {
  id            Int      @id @default(autoincrement())
  symbol        String
  alert_type    String   // "percentage_up", "percentage_down", "price_target"
  threshold     Decimal  @db.Decimal(10, 4) // Percentage or price
  is_active     Boolean  @default(true)
  portfolio_id  Int?     // Optional: alert specific to portfolio
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Alert history
  last_triggered_at DateTime?
  trigger_count     Int      @default(0)

  // Relations
  portfolio Portfolio? @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)
  triggers  StockAlertTrigger[]

  @@map("stock_price_alerts")
  @@index([symbol, is_active])
  @@index([portfolio_id, is_active])
}

// NEW: Stock Alert Trigger History
model StockAlertTrigger {
  id               Int      @id @default(autoincrement())
  alert_id         Int
  symbol           String
  trigger_price    Decimal  @db.Decimal(10, 4)
  previous_price   Decimal  @db.Decimal(10, 4)
  percentage_change Decimal @db.Decimal(10, 4)
  volume           BigInt?
  triggered_at     DateTime @default(now())

  // Alert context
  market_hours     Boolean  @default(true)
  alert_sent       Boolean  @default(false)
  alert_channels   String[] // ["slack", "email", "sms"]

  // Relations
  alert StockPriceAlert @relation(fields: [alert_id], references: [id], onDelete: Cascade)

  @@map("stock_alert_triggers")
  @@index([symbol, triggered_at])
  @@index([alert_id, triggered_at])
}

// NEW: Portfolio Analysis History
model PortfolioAnalysisHistory {
  id           Int      @id @default(autoincrement())
  portfolio_id Int
  analysis_type String  // "daily", "weekly", "monthly", "rebalance", "alert"

  // Analysis results
  total_value       Decimal  @db.Decimal(15, 2)
  daily_return      Decimal? @db.Decimal(10, 6)
  total_return      Decimal? @db.Decimal(10, 6)
  risk_score        Decimal? @db.Decimal(5, 4)
  diversification   Decimal? @db.Decimal(5, 4)

  // LLM insights
  llm_summary       String?  @db.Text
  recommendations   String[] // Array of recommendation strings
  risk_factors      String[] // Array of identified risks
  opportunities     String[] // Array of identified opportunities

  // Performance metrics
  sharpe_ratio      Decimal? @db.Decimal(10, 6)
  max_drawdown      Decimal? @db.Decimal(10, 6)
  volatility        Decimal? @db.Decimal(10, 6)
  beta              Decimal? @db.Decimal(10, 6)

  created_at        DateTime @default(now())

  // Relations
  portfolio Portfolio @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)

  @@map("portfolio_analysis_history")
  @@index([portfolio_id, analysis_type, created_at])
  @@index([analysis_type, created_at])
}
